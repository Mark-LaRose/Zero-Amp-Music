/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatemy_new_app"]("main_window",{

/***/ "./src/preload.js":
/*!************************!*\
  !*** ./src/preload.js ***!
  \************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  contextBridge,\n  ipcRenderer\n} = __webpack_require__(/*! electron */ \"electron\");\nconst path = __webpack_require__(/*! path-browserify */ \"./node_modules/path-browserify/index.js\");\n\n// Define the direct file path to the 'music' directory\nconst baseDir = process.env.MUSIC_DIR || \"D:/TheCode/WorkingProjects/ZeroAmpMusic/public/music\";\n\n// Create an HTML5 Audio object for music playback\nconst audio = new Audio();\n\n// Helper function to format file paths correctly\nconst formatFilePath = filePath => {\n  try {\n    const formattedPath = `file://${filePath.replace(/\\\\/g, \"/\")}`; // Fix path formatting\n    console.log(`Formatted file path: ${formattedPath}`);\n    return formattedPath;\n  } catch (error) {\n    console.error(\"Error formatting file path:\", error);\n    return filePath;\n  }\n};\n\n// Expose safe APIs to the renderer process\ncontextBridge.exposeInMainWorld(\"electron\", {\n  // Expose the base directory path\n  baseDir,\n  // Dialog functionality\n  dialog: {\n    showOpenDialog: async options => {\n      try {\n        return await ipcRenderer.invoke(\"dialog:openFile\", options);\n      } catch (error) {\n        console.error(\"Error showing dialog:\", error);\n        return {\n          canceled: true,\n          filePaths: []\n        };\n      }\n    }\n  },\n  // File system operations\n  fileSystem: {\n    copyFile: async (source, destination) => {\n      try {\n        return await ipcRenderer.invoke(\"fs:copyFile\", {\n          source,\n          destination\n        });\n      } catch (error) {\n        console.error(\"Error copying file:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    readDirectory: async dir => {\n      try {\n        return await ipcRenderer.invoke(\"fs:readDirectory\", dir);\n      } catch (error) {\n        console.error(\"Error reading directory:\", error);\n        return {\n          success: false,\n          files: []\n        };\n      }\n    },\n    rename: async (oldPath, newPath) => {\n      try {\n        return await ipcRenderer.invoke(\"fs:rename\", {\n          oldPath,\n          newPath\n        });\n      } catch (error) {\n        console.error(\"Error renaming file:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    delete: async filePath => {\n      try {\n        return await ipcRenderer.invoke(\"fs:delete\", filePath);\n      } catch (error) {\n        console.error(\"Error deleting file:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    }\n  },\n  // Audio playback functionality\n  audio: {\n    play: filePath => {\n      try {\n        const formattedPath = formatFilePath(filePath); // Format the path\n        console.log(`Attempting to play: ${formattedPath}`);\n        audio.src = formattedPath;\n        audio.play().then(() => {\n          console.log(`Started playing: ${formattedPath}`);\n        }).catch(error => {\n          console.error(\"Error starting playback:\", error);\n        });\n      } catch (error) {\n        console.error(\"Error playing audio:\", error);\n      }\n    },\n    pause: () => {\n      try {\n        audio.pause();\n        console.log(\"Audio paused\");\n      } catch (error) {\n        console.error(\"Error pausing audio:\", error);\n      }\n    },\n    stop: () => {\n      try {\n        audio.pause();\n        audio.currentTime = 0;\n        console.log(\"Audio stopped\");\n      } catch (error) {\n        console.error(\"Error stopping audio:\", error);\n      }\n    },\n    setVolume: volume => {\n      try {\n        audio.volume = volume / 100;\n        console.log(`Volume set to: ${volume}`);\n      } catch (error) {\n        console.error(\"Error setting volume:\", error);\n      }\n    },\n    isPlaying: () => !audio.paused\n  },\n  // Enhanced error handling for audio events\n  audioEvents: {\n    attachErrorLogger: () => {\n      audio.onerror = () => {\n        console.error(\"Audio playback error\", audio.error);\n        switch (audio.error.code) {\n          case audio.error.MEDIA_ERR_ABORTED:\n            console.error(\"Playback was aborted.\");\n            break;\n          case audio.error.MEDIA_ERR_NETWORK:\n            console.error(\"A network error occurred.\");\n            break;\n          case audio.error.MEDIA_ERR_DECODE:\n            console.error(\"Audio decoding failed.\");\n            break;\n          case audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED:\n            console.error(\"Audio source not supported.\");\n            break;\n          default:\n            console.error(\"An unknown error occurred.\");\n        }\n      };\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/preload.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("17c28a4edf09c0a815ab")
/******/ })();
/******/ 
/******/ }
);